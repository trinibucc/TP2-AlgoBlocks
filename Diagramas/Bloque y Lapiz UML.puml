@startuml

interface Bloque{
     ejecutar(Personaje)
}

class BloqueDerecha implements Bloque{
}

class BloqueAbajo implements Bloque{
}

class BloqueIzquierda implements Bloque{
}

class BloqueArriba implements Bloque{
}

class BloqueIterativo implements Bloque{
    # List<Bloque>
    + recorrer(Personaje)
    + agregarBloque(): AlgoBlocks
}
BloqueIterativo o---> Personaje
BloqueIterativo ...> AlgoBlocks

class BloqueInverso extends BloqueIterativo{
    + BloqueInverso(Personaje)
}

class BloqueRepetir extends BloqueIterativo{
    - int
    + BloqueRepetir(int, Personaje)
}

interface Lapiz{
    dibujar(int[2])
}

class LapizAbajo implements Lapiz, Bloque{
}
LapizAbajo ...> SectorDibujo

class LapizArriba implements Lapiz, Bloque{
    - List<int[2]>
}

class SectorDibujo{
    - {static} SectorDibujo
    - List<int[2]>
    - SectorDibujo()
    - {static} crearInstancia()
    + {static} obtenerSectorDibujo(): SectorDibujo
    + agregarDibujo(int[2])
    + obtenerDibujo(): int[2]
}

@enduml